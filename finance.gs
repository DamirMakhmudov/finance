function runPanelFinance() {
  let
    sp = SpreadsheetApp.getActiveSpreadsheet(),
    html = HtmlService.createTemplateFromFile('finance/index').evaluate().setTitle('–ö–∞—Å—Å–∞'),
    sheet = sp.getSheetByName('–ö–∞—Å—Å–∞');
  if (!sheet) {
    Browser.msgBox('–Ø –Ω–µ –Ω–∞—à–µ–ª –ª–∏—Å—Ç "–ö–∞—Å—Å–∞"');
    return;
  }
  SpreadsheetApp.getUi().showSidebar(html);
}

function getModelFinance(userEmail) {
  limb.toast('–û–ø—Ä–µ–¥–µ–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', 'üîî');
  let
    dataSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('data'),
    users = pereplanlibrary.getData('users', dataSheet),
    user = users.names[users.emails.indexOf(userEmail)];

  if (!user) {
    Browser.msgBox('–¢–µ–±—è –Ω–µ—Ç –≤ "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ", –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  limb.toast('–§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤', 'üîî');
  let
    sp = SpreadsheetApp.getActiveSpreadsheet(),
    sheet = sp.getSheetByName('–ú–µ–Ω–µ–¥–∂–µ—Ä'),
    addressVals = sheet.getRange(2, sheet.getRange('1:1').getValues()[0].indexOf('–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞') + 1, sheet.getLastRow(), 1).getValues().map(item => ({ "label": item[0], "sheet": "–ú–µ–Ω–µ–¥–∂–µ—Ä" }));

  var model = {
    user: { "val": user },
    userOptions : users.names,

    paymentType: { "val": "" },

    paymentTypeOptions: [
      { label: '–ü—Ä–∏—Ö–æ–¥', value: '–ü—Ä–∏—Ö–æ–¥' },
      { label: '–†–∞—Å—Ö–æ–¥', value: '–†–∞—Å—Ö–æ–¥' }
    ],

    paymentMethod: { "val": "" },

    paymentMethodOptions: [
      { label: '–ù–∞–ª', value: '–ù–∞–ª' },
      { label: '–û–û–û', value: '–û–û–û' },
      { label: '–ö–∞—Ä—Ç–∞', value: '–ö–∞—Ä—Ç–∞' },
      { label: '–ò–ü', value: '–ò–ü' },
      { label: '–ö–∞—Ä—Ç–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ', value: '–ö–∞—Ä—Ç–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ' }
    ],

    office: { "val": "" },

    officeOptions: [
      { label: '–í–î–ù–•', value: '–í–î–ù–•' },
      { label: '–í–ü', value: '–í–ü' }
    ],

    address: { "val": "" },

    addressOptions: addressVals,

    addressOptionsArchive: [],

    comment: { "val": "" },

    sum: { "val": "" },

    consumption: { "val": "" },

    managerApp: { "val": "" },

    consumptionOptions: [
      { 'label': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'needaddress': false },
      { 'label': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', 'needaddress': false },
      { 'label': '–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞', 'needaddress': false },
      { 'label': '–ë–æ–Ω—É—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä—ã', 'needaddress': false },
      { 'label': '–î–∏–º–∞', 'needaddress': false },
      { 'label': '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç–µ–ª–µ–π', 'needaddress': true },
      { 'label': '–î—Ä—É–≥–∞—è —Ä–µ–∫–ª–∞–º–∞', 'needaddress': false },
      { 'label': '–ó–ü', 'needaddress': false },
      { 'label': '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞', 'needaddress': false },
      { 'label': '–ö—É—Ä—å–µ—Ä—ã', 'needaddress': true },
      { 'label': '–ù–∞–ª–æ–≥–∏', 'needaddress': false },
      { 'label': '–ù—É–∂–¥—ã –æ—Ñ–∏—Å–∞', 'needaddress': false },
      { 'label': '–û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫—É', 'needaddress': true },
      { 'label': '–û—Ç–∑—ã–≤—ã', 'needaddress': true },
      { 'label': '–ü–æ–¥—Ä—è–¥—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏', 'needaddress': false },
      { 'label': '–†–∞–±–æ—Ç—ã –ø–æ —Å–∞–π—Ç—É', 'needaddress': false },
      { 'label': '–†–∞–±–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –æ–±—ä–µ–∫—Ç—É', 'needaddress': true },
      { 'label': '–°–ï–û –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', 'needaddress': false },
      { 'label': '–°–ü–ë', 'needaddress': false },
      { 'label': '–¢–µ–ª–µ—Ñ–æ–Ω–∏—è', 'needaddress': false },
      { 'label': '–£–¥–∞–ª–µ–Ω—â–∏–∫–∏', 'needaddress': false }
    ],

    sheet: { "val": "–ú–µ–Ω–µ–¥–∂–µ—Ä" },
    sheets: ['–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ú–µ–Ω–µ–¥–∂–µ—Ä.–ê—Ä—Ö–∏–≤']
  }
  return JSON.stringify(model);
}

function saveDataGSFinance(data) {
  let
    model = JSON.parse(data),
    sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('–ö–∞—Å—Å–∞'),
    header = sheet.getRange('2:2').getValues()[0],
    values = [];

  model.date = { "val": (new Date()).toLocaleDateString() };
  header.forEach(title => {
    if (model.hasOwnProperty(title)) {
      values.push(model[title].val)
    }
  });
  values[header.indexOf('–ê–¥—Ä–µ—Å')] = model.address.val.label;

  // if(model.paymentType.val == 'income'){
  //   values.push(model.sum);
  //   values.push(0);
  // }else{
  //   values.push(0);
  //   values.push(model.sum.val);
  // };
  // values.push(model.comment.val);
  // values.push((new Date()).toLocaleDateString());
  // values.push(model.place.val);
  // values.push(model.paymentMethod.val);
  values.push(Session.getActiveUser().getEmail())
  sheet.appendRow(values);
}